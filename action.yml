---
# SPDX-FileCopyrightText: Copyright (C) 2021 ale5000
# SPDX-License-Identifer: LGPL-3.0-or-later
# SPDX-FileType: SOURCE

name: "TEST"
author: "ale5000"
description: "GitHub action to create documentation of all shell scripts using shdoc."

inputs:
  shdoc-version:
    description: "Version to use. Values: [git]"
    required: false
    default: "git"
runs:
  using: "composite"
  steps:
    - name: "Checkout shdoc"
      uses: actions/checkout@v2
      with:
        repository: "reconquest/shdoc"
        path: "external_files_shdoc"
        submodules: "true"
    - name: "Compile shdoc"
      shell: bash
      run: |
        # Compiling shdoc...
        action_path="${{ github.action_path }}"
        echo '---------------------------'
        ls -A "${action_path?}"
        echo '---------------------------'
        rm -rf "${action_path?}/shdoc_src"; echo 1
        mv -f 'external_files_shdoc' "${action_path?}/shdoc_src"; echo 2
        init_dir="$(pwd)"
        cd "${action_path?}/shdoc_src"; echo 3
        make install > /dev/null; echo 4
        cd "${init_dir?}"
        rm -rf "${action_path?}/shdoc_src"; echo 5

        echo '---------------------------'
        ls -A "${action_path?}"
        echo '---------------------------'
    - name: "Execute shdoc"
      id: "shellcheck-scan"
      shell: bash {0}
      run: |
        # Executing shdoc...
        action_path="${{ github.action_path }}"
        mkdir -p "${action_path}/docs"
        hash gawk shdoc

        scan_files()
        {
          count='1'
          set -o pipefail
          while read -r FILE; do
            echo '################################################################################'
            FILE_LOWER="$(echo "${FILE}" | tr '[:upper:]' '[:lower:]')"

            if expr "$FILE_LOWER" : '^.*\.\(sh\|ash\|dash\|ksh\|bash\|bats\)$' 1>/dev/null || test '#!' = "$(head -c 2 "$FILE")"; then
              echo "Currently scanning: $FILE"
              shdoc < "$FILE" > "${action_path}/docs/${count}.md"; STATUS="$?"
              if test "${STATUS}" -ne 0; then echo "Error"; return 1; fi

              cat "${action_path}/docs/${count}.md" | tr -d '\r\n' > "${action_path}/test.md"
              if test -s "${action_path}/test.md"; then 
                ((count++))
              else
                echo "Empty documentation"; rm -f "${action_path}/docs/${count}.md"
              fi
              rm -f "${action_path}/test.md"
            else
              echo "Skipped: $FILE"
            fi
          done

          return 0
        }
        find '.' -type f \! -path './.git/*' | LC_ALL=C sort | scan_files; num_files_with_issues="$?"

        printf '################################################################################\n\n'
        if test "${num_files_with_issues}" -gt '0'; then result_icon="üêõ"; else result_icon="‚úÖ"; fi
        echo "::notice::NUMBER OF FILES WITH ISSUES: ${num_files_with_issues} ${result_icon}"
        if test "${num_files_with_issues}" -gt '0'; then exit '1'; else printf "\033[32mAll is good!\n"; fi
    - uses: actions/upload-artifact@v2
      with:
        name: "Documentation"
        path: "${{ github.action_path }}/docs/"
